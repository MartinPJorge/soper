-- Ej 1 --
La diferencia es que al pasarle una clave constante, en caso de que ya se haya creado una cola de mensajes con la misma clave, no creamos otra nueva. Mientras que si le pasamos el valor IPC_PRIVATE, se crea una nueva cola de mensajes directamente.

-- Ej 2 --
El programa crea una cola de mensajes, y luego se encarga de enviar un mensaje a dicha cola. Para ello primero creamos una estructura de tipo msgbuf a la que se le asocia el tipo de mensaje y el propio mensaje. Una vez a finalizado el programa, al ejecutar 'ipcs -q' podemos observar que hay una entrada que so corresponde a la cola de mensajes creada. En dicha entrada también se especifican los bytes utilizados (que en este caso serán los 12Bytes usados por la cadena 'Hola mundo!'), así como el número de mensajes (en este caso 1).

-- Ej 3 --
En este programa hacemos lo mismo que en el anterior, pero ahora, antes de finalizar, hacemos una llamada a msgctl con el flag IPC_RMID solicitando el borrado de la cola de mensajes creada.

-- Ej 4 --
Para conseguir el bloqueo hay que obtener el número máximo de bytes que admite la cola del sistema que hemos creado. Para ello llamamos a la función 'msgctl(queue, IPC_STAT, &buf)' para obtener la información de los atributos de la cola creada, y después obtenemos el valor del campo mencionado mediante 'buf.msg_qbytes'. Una vez obtenido el atributo, calculamos el número de iteraciones necesarias para rebasar dicho límite. El proceso se bloqueará porque al intentar enviar el mensaje, nos encontramos con que la cola no puede almacenar más mensajes, y según el manual en estas situacónes el comportamiento por defecto es el bloqueo del proceso.

-- Ej 5 --
- Lo que sucede es que una vez ejecutamos el programa 4, el procesos se bloquea porque la cola no tiene memoria suficiente. Si despues llamamos al programa 5, entonces este programa irá sacando todos los mensajes disponibles de la cola hasta que esta se quede vacía. Una vez saca todos los mensajes y deja la cola vacía, el proceso se quedará bloqueado.
- Incluso si cambiamos el valor de la variable LOOP esto seguirá sucediendo, porque tras cada vez en la que el programa 4 envia los mensajes, el programa 5 se encarga de sacarlos al llamar a la función de recibir. De modo que el programa 4 terminará de enviar todos sus mensajes y el programa 5 se quedará de nuevo bloqueado en cuanto esto suceda (pues la cola estará vacía).

-- Ej 6 --
Aparece el mensaje 'msgrcv: Identifier removed', y el programa termina abruptamente.

-- Ej 7 --
2) En el ejercicio2 no afecta para nada porque solo enviamos un mensaje que entra perfectamente en la cola de mensajes, y por tanto no existe posibilidad de bloqueo.
4) En el ejercicio4 el programa da un error cuando intentamos enviar un mensaje y tenemos la cola saturada, en lugar de que el proceso se quede bloqueado esperando a poder enviar el mensaje. En dicho momento se lanza el mensaje de error 'msgsnd: Resource temporarily unavailable'. 
5) En el ejercicio5, al especificar la bandera en la funciín msgrcv(), esta devuelve un error (en lugar de quedarse esperando a recibir un mensaje) y al mostrarlo por pantalla con 'perror()' obtenemos: 'msgrcv: No message of desired type'.

-- Ej 8 --
- Al ejecutar primero el 8B, el programa se queda colgado hasta que ejecutemos el 8A y mande algún mensaje. A medida que el 8A va enviando los mensajes, el 8B los recive y los muestra por pantalla. Pero cuando el 8A termina de enviar los mensajes, el 8B se queda colgado a la espera de recivir uno nuevo.
- Cuando ejecutamos el 8A pasando como argumento 1, y el 8B pasándole como argumento 2, lo que sucede es que el 8B se queda a la espera de recibir mensajes de tipo 2. Pero como el 8A está enviando mensajes de tipo 1, el proceso que ha lanzado 8B se queda colgado y no saca ningún mensaje por pantalla, dado que no le llega ninguno del tipo solicitado.

-- Ej 9 --
Tras ejecutar las 3 terminales, al ejecutar el programa 8B con argumento -2, lo que se muestra por pantalla son los mensajes de tipo 1 y 2 que han mandado los repectivos procesos lanzados anteriormente. Esto se debe a que si en el argumento de la función msgrcv() en el que especificamos el tipo de mensaje ponemos un valor negativo, la función sacará de la cola aquellos cuyo tipo sean en valor absoluto menores o iguales que el número negativo especificado. De este modo no aparecen los mensajes de tipo 3 que mandó uno de los procesos.

-- Ej 10 --
Lo que sucede es que el tamaño del mensaje que esperamos recibir es de 15B, sin embargo la cadena que enviamos a la cola de mensajes sobrepasa dicho tamaño. De este modo, cuando la función msgrcv() intenta sacar de la cola uno de los mensajes, sale con un error en el que se notifica que el argumento es demasiado grande. Tras encontrarse con este error, nuestro porgrama sale y en la cola de mensajes todavía esta el mensaje mandado, ya que si msgrcv() da un error por un argumento demasiado largo, no saca el mensaje de la cola.

-- Ej 11 --
Al añadir la bandera 'MSG_NOERROR', la función msgrcv() saca de la cola los mensajes, pero estos se sacan truncados para que que entren en las estructuras pasadas por argumento a la función.

-- Ej 12 --
La función devolverá 0 en caso de que se haya ejecutado correctamente, y EAGAIN o EINVAL en caso de que se produzca un error. El primer valor dice que la función no se ha podido ejecutar correctamente porque en el sistema se han agotado los recursos necesarios para la creación del hilo, mientars que el otro valor indica que la variable pasada al argumento 'attr' no es válido.

-- Ej 14 --
Si que se terminan todos lo hilos, ya que en la terminal apreciamos que se imprimen los PIDs de cada hilo. Además esto es posible debido a que con 'pthread_exit()' terminamos el hilo, y por tanto aunque termine antes el hilo ppal. hasta que no terminan el resto de hilos, no se termina el proceso.

-- Ej 15 --
Con pthread_join, esperamos a que termine cada hilo creado antes de que se siga ejecutando el hilo principal.
Sin embargo, con pthread_tryjoin_np, la espera no es bloqueante, por lo que el hilo principal continúa su ejecución normal y termina con exit(0) antes de que los demás hilos creados lleguen a imprimir su pid por pantalla.

-- Ej 16 --
- Entre los hilos, tenemos compartidas todas las variables declaradas al comienzo del main, porque estas variables serán comunes a todos los hilos del proceso. Además las variables globales y estáticas también serán compartidas.
- A las variables estáticas, ya que estas tienen una dirección física fija a lo largo de la ejecución del proceso, y por tanto son las mismas en las sucesivas llamadas a la rutina en las que se han declarado.

-- Ej 17 --
Protegemos la espera (usleep) y el printf que imprime los mensajes mediante un semáforo que hemos creado e inicializado a 1 en el hilo principal. Protegiendo esta región crítica, nos aseguramos de que no se impriman los mensajes a la vez, dando resultados inesperados, ya que cuando un hilo quiera entrar a la sección crítica, tendrá que hacer un down del semáforo, y hasta que no imprima su mensaje, el segundo hilo habrá llegado y estará todavía en el down, esperando a que el primer hilo salga de la sección crítica (up del semáforo).

-- Ej 18 --
En este programa nos piden que cada hilo devuelva al terminar una cadena de caracteres con un saludo y su TID. Para hacerlo, reservamos memoria dinámica para una cadena de caracteres, la rellenamos con la frase que nos piden, y a continuación llamamos a pthread_exit pasándosela como argumento para que el hilo termine su ejecución. Mientras tanto, en el hilo principal, habremos hecho pthread_join pasándole como argumento el TID del hilo secundario, de manera que estaremos esperando a que termine para guardar su retorno (la cadena de caracteres) en la variable retorno. Por último, imprimimos el mensaje (guardado en retorno) como cadena de caracteres y liberamos retorno.
Al crear un hilo, éste pasará a ejecutar una función que recibe como parámetro un void* y devuelve un void*. Para devolver una cadena de caracteres al hilo principal, lo que hacemos es crearla y pasársela a pthread_exit como parámetro, haciéndole un casting a void*. Al hacer pthread_join, lo que haremos será pasarle un void** (en nuestro programa, &retorno), donde se guardará el retorno del hilo secundario. Para imprimir el retorno, como la variable retorno es un void*, le haremos un casting a char* para que nos permita tratarla como una cadena de caracteres a la hora de hacer el printf. 
Las funciones de los hilo, al recibir como parámetro un void* y pthread_exit, al devolver al hilo principal un void* nos otorgan una gran flexibilidad, ya que esos void*, interpretados correctamente, nos permiten pasar cualquier tipo de dato entre dos hilos.

-- Ej 19 --
Ahora, nada más crear un hilo con pthread_create, lo cancelaremos a continuación con pthread_cancel (pasándole como parámetro el TID del hilo a cancelar). Para comprobar que efectivamente el hilo ha sido cancelado, llamamos a pthread_join (pasándole el tid y un void** retorno) y comprobamos que retorno == PTHREAD_CANCELED, si no lo fuese, la cancelación del hilo habría fallado.
En el hilo secundario, además, llamaremos a pthread_setcanceltype(PTHREAD_CANCEL_ASYNCHRONOUS, NULL);. Con esta sentencia, estamos diciendo que el hilo pueda detenerse de manera asíncrona (sin tener que esperar al reloj para detenerse, haciéndolo cuando le llegue el pthread_cancel).

-- Ej 20 --
Creamos dos funciones capturadoras de señales, que imprimirán mensajes de aviso para identificar al hilo que ha capturado la señal. En el hilo principal, activamos la captura de SIGINT, creamos un hilo y entramos en pausa. En el hilo secundario, activamos la captura de SIGINT (con una función capturadora distinta de la anterior) y entramos en pausa. Además, para cuando salgamos de la pausa, imprimiremos mensajes de aviso con ambos hilos.
Al ejecutar y pulsar Ctrl+C, la función que captura SIGINT resulta ser la del hilo secundario. Curiosamente, el proceso que sale de la pausa, es el principal, en lugar del secundario, que es el que la ha capturado.
Si no hacemos pthread_join, al pulsar Ctrl+C, el hilo secundario imprimirá su mensaje y el hilo principal saldrá de la espera y terminará. Si volvemos a pulsar Ctrl+C, el hilo secundario volverá a imprimir su mensaje (con un TID diferente¿?) y saldrá del pause y terminará.
Por el contrario, si hacemos pthread_join, al pulsar Ctrl+C el hilo secundario imprimirá su mensaje y el hilo principal saldrá de la espera, pero no terminará, sino que se quedará esperando a que el hilo secundario termine. A partir de este momento, entramos en un bucle infinito, ya que siempre que pulsemos Ctrl+C, el hilo secundario imprimirá el mismo mensaje que al principio y volverá a la pausa, no terminando nunca (y no permitiendo que el hilo principal termine).